{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      socket: null,\n      messages: []\n    };\n  },\n  methods: {\n    connectWebSocket() {\n      const keyword = '3'; // Здесь вы указываете нужный ключ\n      const url = 'ws://localhost:3000/keywords';\n      this.socket = new WebSocket(url);\n      this.socket.onopen = () => {\n        console.log('WebSocket соединение установлено');\n        this.socket.send(JSON.stringify({\n          keyword\n        }));\n      };\n      this.socket.onmessage = event => {\n        console.log('Получено сообщение:', event.data);\n        this.messages.push({\n          text: event.data,\n          id: Date.now()\n        });\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket соединение закрыто');\n      };\n    },\n    disconnectWebSocket() {\n      if (this.socket) {\n        this.socket.close();\n        this.socket = null;\n      }\n    }\n  },\n  beforeUnmount() {\n    this.disconnectWebSocket();\n  }\n};","map":{"version":3,"names":["data","socket","messages","methods","connectWebSocket","keyword","url","WebSocket","onopen","console","log","send","JSON","stringify","onmessage","event","push","text","id","Date","now","onclose","disconnectWebSocket","close","beforeUnmount"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\MysScket.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"connectWebSocket\">Подключить WebSocket</button>\r\n    <button @click=\"disconnectWebSocket\">Отключить WebSocket</button>\r\n    <div v-for=\"message in messages\" :key=\"message.id\">\r\n      {{ message.text }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      messages: [],\r\n    };\r\n  },\r\n  methods: {\r\n    connectWebSocket() {\r\n      const keyword = '3'; // Здесь вы указываете нужный ключ\r\n      const url = 'ws://localhost:3000/keywords';\r\n      this.socket = new WebSocket(url);\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket соединение установлено');\r\n        this.socket.send(JSON.stringify({ keyword }));\r\n      };\r\n\r\n      this.socket.onmessage = (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.messages.push({ text: event.data, id: Date.now() });\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        console.log('WebSocket соединение закрыто');\r\n      };\r\n    },\r\n    disconnectWebSocket() {\r\n      if (this.socket) {\r\n        this.socket.close();\r\n        this.socket = null;\r\n      }\r\n    },\r\n  },\r\n  beforeUnmount() {\r\n    this.disconnectWebSocket();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AAWA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAAA,EAAG;MACjB,MAAMC,OAAM,GAAI,GAAG,EAAE;MACrB,MAAMC,GAAE,GAAI,8BAA8B;MAC1C,IAAI,CAACL,MAAK,GAAI,IAAIM,SAAS,CAACD,GAAG,CAAC;MAEhC,IAAI,CAACL,MAAM,CAACO,MAAK,GAAI,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACT,MAAM,CAACU,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAQ,CAAC,CAAC,CAAC;MAC/C,CAAC;MAED,IAAI,CAACJ,MAAM,CAACa,SAAQ,GAAKC,KAAK,IAAK;QACjCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,KAAK,CAACf,IAAI,CAAC;QAC9C,IAAI,CAACE,QAAQ,CAACc,IAAI,CAAC;UAAEC,IAAI,EAAEF,KAAK,CAACf,IAAI;UAAEkB,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC;QAAE,CAAC,CAAC;MAC1D,CAAC;MAED,IAAI,CAACnB,MAAM,CAACoB,OAAM,GAAI,MAAM;QAC1BZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC;IACH,CAAC;IACDY,mBAAmBA,CAAA,EAAG;MACpB,IAAI,IAAI,CAACrB,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACsB,KAAK,CAAC,CAAC;QACnB,IAAI,CAACtB,MAAK,GAAI,IAAI;MACpB;IACF;EACF,CAAC;EACDuB,aAAaA,CAAA,EAAG;IACd,IAAI,CAACF,mBAAmB,CAAC,CAAC;EAC5B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}