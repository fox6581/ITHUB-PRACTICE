{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"disabled\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Статус загрузки:\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Выбранный контент:\", -1 /* HOISTED */);\nconst _hoisted_6 = [\"href\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.keyword = $event),\n    placeholder: \"Введите ключ (например, 1)\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.keyword]]), _createElementVNode(\"button\", {\n    disabled: !$data.keyword,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Отправить\", 8 /* PROPS */, _hoisted_1), _createElementVNode(\"div\", null, [_hoisted_2, _createElementVNode(\"p\", null, \"Размер: \" + _toDisplayString($data.status.size), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Количество запущенных потоков: \" + _toDisplayString($data.status.currentThreads), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Прогресс загрузки: \" + _toDisplayString($data.status.progress) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.contentList, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"a\", {\n      onClick: $event => $options.selectContent(item.urls)\n    }, _toDisplayString(item.keyword), 9 /* TEXT, PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), $data.selectedContent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedContent, (url, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"a\", {\n      href: 'http://' + url\n    }, _toDisplayString(url), 9 /* TEXT, PROPS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","$data","keyword","$event","placeholder","disabled","onClick","_cache","args","$options","sendMessage","_hoisted_1","_hoisted_2","_toDisplayString","status","size","currentThreads","progress","_Fragment","_renderList","contentList","item","index","key","selectContent","urls","_hoisted_3","selectedContent","_hoisted_4","_hoisted_5","url","href","_hoisted_6"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\SocetClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input v-model=\"keyword\" placeholder=\"Введите ключ (например, 1)\">\r\n    <button :disabled=\"!keyword\" @click=\"sendMessage\">Отправить</button>\r\n    <div>\r\n      <p>Статус загрузки:</p>\r\n      <p>Размер: {{ status.size }}</p>\r\n      <p>Количество запущенных потоков: {{ status.currentThreads }}</p>\r\n      <p>Прогресс загрузки: {{ status.progress }}%</p>\r\n    </div>\r\n    <div>\r\n      <ul>\r\n        <li v-for=\"(item, index) in contentList\" :key=\"index\">\r\n          <a @click=\"selectContent(item.urls)\">{{ item.keyword }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-if=\"selectedContent\">\r\n      <h2>Выбранный контент:</h2>\r\n      <ul>\r\n        <li v-for=\"(url, index) in selectedContent\" :key=\"index\">\r\n          <a :href=\"'http://' + url\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      status: {\r\n        size: 0,\r\n        currentThreads: 0,\r\n        progress: 0,\r\n      },\r\n      contentList: [],\r\n      selectedContent: null,\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.keyword) {\r\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n        socket.addEventListener(\"open\", () => {\r\n          socket.send(this.keyword);\r\n          this.contentList = [];\r\n        });\r\n\r\n        socket.addEventListener(\"message\", (event) => {\r\n          const data = JSON.parse(event.data);\r\n          console.log(\"Получены данные от сервера:\", data);\r\n\r\n          if (Array.isArray(data) && data.length > 0) {\r\n            this.status = {\r\n              size: data[0].size,\r\n              currentThreads: data[0].currentThreads,\r\n              progress: data[0].progress,\r\n            };\r\n            this.contentList = data;\r\n          } else {\r\n            this.status = {\r\n              size: 0,\r\n              currentThreads: 0,\r\n              progress: 0,\r\n            };\r\n            this.contentList = [];\r\n          }\r\n        });\r\n\r\n        socket.addEventListener(\"error\", () => {\r\n          console.log(\"Ошибка соединения\");\r\n        });\r\n      }\r\n    },\r\n\r\n    selectContent(urls) {\r\n      // Выберите URL, который пользователь хочет скачать\r\n      const selectedUrl = urls[0]; // В данном примере выбираем первый URL\r\n\r\n      // Отправьте выбранный URL на сервер для скачивания\r\n      const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n      socket.addEventListener(\"open\", () => {\r\n        // Отправьте URL на сервер для скачивания\r\n        socket.send(selectedUrl);\r\n      });\r\n\r\n      socket.addEventListener(\"message\", (event) => {\r\n        const data = JSON.parse(event.data);\r\n        console.log(\"Получены данные от сервера:\", data);\r\n\r\n        // Обновите статус загрузки\r\n        this.status = {\r\n          size: data.size,\r\n          currentThreads: data.currentThreads,\r\n          progress: data.progress,\r\n        };\r\n      });\r\n\r\n      socket.addEventListener(\"error\", () => {\r\n        console.log(\"Ошибка соединения\");\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;gCAKMA,mBAAA,CAAuB,WAApB,kBAAgB;;;;;gCAanBA,mBAAA,CAA2B,YAAvB,oBAAkB;;;uBAjB1BC,mBAAA,CAwBM,c,gBAvBJD,mBAAA,CAAkE;+DAAlDE,KAAA,CAAAC,OAAO,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAArBH,KAAA,CAAAC,OAAO,E,GACvBH,mBAAA,CAAoE;IAA3DM,QAAQ,GAAGJ,KAAA,CAAAC,OAAO;IAAGI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,WAAS,iBAAAG,UAAA,GAC3DZ,mBAAA,CAKM,cAJJa,UAAuB,EACvBb,mBAAA,CAAgC,WAA7B,UAAQ,GAAAc,gBAAA,CAAGZ,KAAA,CAAAa,MAAM,CAACC,IAAI,kBACzBhB,mBAAA,CAAiE,WAA9D,iCAA+B,GAAAc,gBAAA,CAAGZ,KAAA,CAAAa,MAAM,CAACE,cAAc,kBAC1DjB,mBAAA,CAAgD,WAA7C,qBAAmB,GAAAc,gBAAA,CAAGZ,KAAA,CAAAa,MAAM,CAACG,QAAQ,IAAG,GAAC,gB,GAE9ClB,mBAAA,CAMM,cALJA,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKkB,SAAA,QAAAC,WAAA,CAFuBlB,KAAA,CAAAmB,WAAW,GAA3BC,IAAI,EAAEC,KAAK;yBAAvBtB,mBAAA,CAEK;MAFqCuB,GAAG,EAAED;IAAK,IAClDvB,mBAAA,CAA2D;MAAvDO,OAAK,EAAAH,MAAA,IAAEM,QAAA,CAAAe,aAAa,CAACH,IAAI,CAACI,IAAI;wBAAMJ,IAAI,CAACnB,OAAO,wBAAAwB,UAAA,E;sCAI/CzB,KAAA,CAAA0B,eAAe,I,cAA1B3B,mBAAA,CAOM,OAAA4B,UAAA,GANJC,UAA2B,EAC3B9B,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKkB,SAAA,QAAAC,WAAA,CAFsBlB,KAAA,CAAA0B,eAAe,GAA9BG,GAAG,EAAER,KAAK;yBAAtBtB,mBAAA,CAEK;MAFwCuB,GAAG,EAAED;IAAK,IACrDvB,mBAAA,CAAwC;MAApCgC,IAAI,cAAcD;wBAAQA,GAAG,wBAAAE,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}