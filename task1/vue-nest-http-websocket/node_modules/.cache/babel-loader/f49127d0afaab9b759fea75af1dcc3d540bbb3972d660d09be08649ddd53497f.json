{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      url: 'http://localhost:3000/api',\n      // Замените на ваш URL сервера\n      httpResponses: [],\n      wsMessage: '',\n      wsMessages: []\n    };\n  },\n  methods: {\n    async sendHttpRequest() {\n      try {\n        const response = await fetch(this.url);\n        const data = await response.text();\n        this.httpResponses.push(data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    sendWebSocketMessage() {\n      // Реализуйте логику WebSocket-клиента для отправки и приема сообщений\n      const socket = new WebSocket('ws://localhost:3000/api'); // Замените URL на адрес вашего WebSocket сервера\n      // Обработчик события открытия соединения\n      socket.addEventListener('open', event => {\n        console.log('WebSocket соединение установлено:', event);\n      });\n\n      // Обработчик события приема сообщения\n      socket.addEventListener('message', event => {\n        console.log('Получено сообщение:', event.data);\n        // Здесь можно обработать полученное сообщение\n      });\n\n      // Обработчик события закрытия соединения\n      socket.addEventListener('close', event => {\n        console.log('WebSocket соединение закрыто:', event);\n      });\n      // Отправка сообщения\n      socket.send('Привет, сервер! Это мое сообщение.');\n\n      // Закрытие соединения\n      socket.close(1000, 'Пользователь закрыл соединение');\n      socket.addEventListener('error', event => {\n        console.error('Произошла ошибка:', event);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","url","httpResponses","wsMessage","wsMessages","methods","sendHttpRequest","response","fetch","text","push","error","console","sendWebSocketMessage","socket","WebSocket","addEventListener","event","log","send","close"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\HttpClient.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Форма для отправки HTTP-запросов -->\r\n      <form @submit.prevent=\"sendHttpRequest\">\r\n        <input v-model=\"url\" type=\"text\" placeholder=\"URL\">\r\n        <button type=\"submit\">Отправить HTTP-запрос</button>\r\n      </form>\r\n      <!-- Вывод результатов HTTP-запросов -->\r\n      <div>\r\n        <h2>Результаты HTTP-запросов:</h2>\r\n        <div v-for=\"(response, index) in httpResponses\" :key=\"index\">\r\n          <p>{{ response }}</p>\r\n        </div>\r\n      </div>\r\n      <!-- WebSocket-клиент -->\r\n      <div>\r\n        <h2>WebSocket-клиент:</h2>\r\n        <input v-model=\"wsMessage\" type=\"text\" placeholder=\"WebSocket сообщение\">\r\n        <button @click=\"sendWebSocketMessage\">Отправить WebSocket сообщение</button>\r\n        <div v-for=\"(message, index) in wsMessages\" :key=\"index\">\r\n          <p>{{ message }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        url: 'http://localhost:3000/api', // Замените на ваш URL сервера\r\n        httpResponses: [],\r\n        wsMessage: '',\r\n        wsMessages: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async sendHttpRequest() {\r\n        try {\r\n          const response = await fetch(this.url);\r\n          const data = await response.text();\r\n          this.httpResponses.push(data);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      },\r\n      sendWebSocketMessage() {\r\n        // Реализуйте логику WebSocket-клиента для отправки и приема сообщений\r\n        const socket = new WebSocket('ws://localhost:3000/api'); // Замените URL на адрес вашего WebSocket сервера\r\n        // Обработчик события открытия соединения\r\nsocket.addEventListener('open', (event) => {\r\n  console.log('WebSocket соединение установлено:', event);\r\n});\r\n\r\n// Обработчик события приема сообщения\r\nsocket.addEventListener('message', (event) => {\r\n  console.log('Получено сообщение:', event.data);\r\n  // Здесь можно обработать полученное сообщение\r\n});\r\n\r\n// Обработчик события закрытия соединения\r\nsocket.addEventListener('close', (event) => {\r\n  console.log('WebSocket соединение закрыто:', event);\r\n});\r\n// Отправка сообщения\r\nsocket.send('Привет, сервер! Это мое сообщение.');\r\n\r\n// Закрытие соединения\r\nsocket.close(1000, 'Пользователь закрыл соединение');\r\n\r\nsocket.addEventListener('error', (event) => {\r\n  console.error('Произошла ошибка:', event);\r\n});\r\n      },\r\n      \r\n    },\r\n\r\n    \r\n  };\r\n  </script>"],"mappings":";AA2BE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,2BAA2B;MAAE;MAClCC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,IAAI,CAACP,GAAG,CAAC;QACtC,MAAMD,IAAG,GAAI,MAAMO,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAI,CAACP,aAAa,CAACQ,IAAI,CAACV,IAAI,CAAC;MAC/B,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACDE,oBAAoBA,CAAA,EAAG;MACrB;MACA,MAAMC,MAAK,GAAI,IAAIC,SAAS,CAAC,yBAAyB,CAAC,EAAE;MACzD;MACRD,MAAM,CAACE,gBAAgB,CAAC,MAAM,EAAGC,KAAK,IAAK;QACzCL,OAAO,CAACM,GAAG,CAAC,mCAAmC,EAAED,KAAK,CAAC;MACzD,CAAC,CAAC;;MAEF;MACAH,MAAM,CAACE,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;QAC5CL,OAAO,CAACM,GAAG,CAAC,qBAAqB,EAAED,KAAK,CAACjB,IAAI,CAAC;QAC9C;MACF,CAAC,CAAC;;MAEF;MACAc,MAAM,CAACE,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;QAC1CL,OAAO,CAACM,GAAG,CAAC,+BAA+B,EAAED,KAAK,CAAC;MACrD,CAAC,CAAC;MACF;MACAH,MAAM,CAACK,IAAI,CAAC,oCAAoC,CAAC;;MAEjD;MACAL,MAAM,CAACM,KAAK,CAAC,IAAI,EAAE,gCAAgC,CAAC;MAEpDN,MAAM,CAACE,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;QAC1CL,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEM,KAAK,CAAC;MAC3C,CAAC,CAAC;IACI;EAEF;AAGF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}