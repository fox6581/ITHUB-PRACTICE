{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      url: 'http://localhost:3000/api',\n      // Замените на ваш URL сервера\n      httpResponses: [],\n      wsMessage: '',\n      wsMessages: [],\n      socket: null,\n      // Добавляем переменную для хранения WebSocket соединения\n      selectedKeyword: \"\",\n      selectedUrls: [] // Массив для хранения URL-адресов\n    };\n  },\n\n  created() {\n    // Инициализация WebSocket и обработчика ошибок\n    this.initWebSocket();\n  },\n  methods: {\n    async sendHttpRequest() {\n      try {\n        const response = await fetch(this.url);\n        const data = await response.text();\n        this.httpResponses.push(data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    updateUrl() {\n      this.$socket.sendObj({\n        keyword: this.selectedKeyword\n      });\n    },\n    initWebSocket() {\n      // Инициализация WebSocket и обработчика ошибок\n\n      const WebSocket = require('ws');\n      const keyword = '3'; // Здесь вы указываете нужный ключ\n      const url = 'ws://localhost:3000/keywords';\n      const socket = new WebSocket(url);\n      socket.on('open', () => {\n        console.log('WebSocket соединение установлено');\n        socket.send(JSON.stringify({\n          keyword\n        }));\n      });\n      socket.on('message', message => {\n        console.log('Получено сообщение:', message);\n      });\n      socket.on('close', () => {\n        console.log('WebSocket соединение закрыто');\n      });\n\n      // const socket = new WebSocket('ws://localhost:3000/api');\n      const socket1 = new WebSocket('ws://localhost:3000/keywords');\n      // Обработчик ошибок WebSocket\n      socket.addEventListener('error', event => {\n        console.error('Произошла ошибка:', event);\n      });\n\n      // Обработчик события открытия соединения\n      socket.addEventListener('open', event => {\n        console.log('WebSocket соединение установлено:', event);\n      });\n\n      // Обработчик события приема сообщения\n      socket.addEventListener('message', event => {\n        console.log('Получено сообщение:', event.data);\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\n      });\n\n      // Обработчик события закрытия соединения\n      socket.addEventListener('close', event => {\n        console.log('WebSocket соединение закрыто:', event);\n      });\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\n\n      // Обработчик ошибок WebSocket\n      socket1.addEventListener('error', event => {\n        console.error('Произошла ошибка:', event);\n      });\n\n      // Обработчик события открытия соединения\n      socket1.addEventListener('open', event => {\n        console.log('WebSocket соединение установлено:', event);\n      });\n\n      // Обработчик события приема сообщения\n      socket1.addEventListener('message', event => {\n        console.log('Получено сообщение:', event.data);\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\n      });\n\n      // Обработчик события закрытия соединения\n      socket1.addEventListener('close', event => {\n        console.log('WebSocket соединение закрыто:', event);\n      });\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\n    },\n\n    sendWebSocketMessage() {\n      // Отправка сообщения через WebSocket\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(this.wsMessage);\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\n        this.wsMessages.push(this.wsMessage);\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\n      } else {\n        console.error('WebSocket соединение не установлено или закрыто.');\n      }\n    },\n    sendWebSocketMessage1() {\n      // Отправка сообщения через WebSocket\n      if (this.socket1 && this.socket1.readyState === WebSocket.OPEN) {\n        this.socket1.send(this.wsMessage);\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\n        this.wsMessages.push(this.wsMessage);\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\n      } else {\n        console.error('WebSocket соединение не установлено или закрыто.');\n      }\n    }\n  },\n  sockets: {\n    // Обработка сообщения, полученного от сервера WebSocket\n    message(response) {\n      if (response.keyword) {\n        this.selectedUrls = response.urls;\n      } else {\n        this.selectedUrls = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","url","httpResponses","wsMessage","wsMessages","socket","selectedKeyword","selectedUrls","created","initWebSocket","methods","sendHttpRequest","response","fetch","text","push","error","console","updateUrl","$socket","sendObj","keyword","WebSocket","require","on","log","send","JSON","stringify","message","socket1","addEventListener","event","sendWebSocketMessage","readyState","OPEN","sendWebSocketMessage1","sockets","urls"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\HttpClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Форма для отправки HTTP-запросов -->\r\n    <form @submit.prevent=\"sendHttpRequest\">\r\n      <input v-model=\"url\" type=\"text\" placeholder=\"URL\">\r\n      <button type=\"submit\">Отправить HTTP-запрос</button>\r\n    </form>\r\n    <!-- Вывод результатов HTTP-запросов -->\r\n\r\n    <!-- <div>\r\n\r\n      <h2>Поиск по ключам</h2>\r\n\r\n      <input v-model=\"selectedKeyword\" @input=\"updateUrl\" placeholder=\"Введите ключевое слово\" />\r\n      <p v-if=\"selectedUrls.length > 0\">\r\n    Соответствующие URL-адреса:\r\n    <ul>\r\n      <li v-for=\"(url, index) in selectedUrls\" :key=\"index\">\r\n        <a :href=\"'http://' + url\">{{ url }}</a>\r\n      </li>\r\n    </ul>\r\n  </p>\r\n    </div> -->\r\n<!-- через сокеты -->\r\n    <div>\r\n      <h2>Поиск через сокеты</h2>\r\n    <input v-model=\"selectedKeyword\" @input=\"updateUrl\" placeholder=\"Введите ключевое слово\" />\r\n    <p v-if=\"selectedUrls.length > 0\">\r\n    Соответствующие URL-адреса:\r\n    <ul>\r\n      <li v-for=\"(url, index) in selectedUrls\" :key=\"index\">\r\n        <a :href=\"'http://' + url\">{{ url }}</a>\r\n      </li>\r\n    </ul>\r\n  </p>\r\n  </div>\r\n\r\n\r\n    <h2>Результаты HTTP-запросов:</h2>\r\n    <div v-for=\"(response, index) in httpResponses\" :key=\"index\">\r\n      <p>{{ response }}</p>\r\n    </div>\r\n  </div>\r\n  <!-- WebSocket-клиент -->\r\n  <div>\r\n    <h2>WebSocket-клиент:</h2>\r\n    <input v-model=\"wsMessage\" type=\"text\" placeholder=\"WebSocket сообщение\">\r\n    <button @click=\"sendWebSocketMessage\">Отправить WebSocket сообщение</button>\r\n    <div v-for=\"(message, index) in wsMessages\" :key=\"index\">\r\n      <p>{{ message }}</p>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      url: 'http://localhost:3000/api', // Замените на ваш URL сервера\r\n      httpResponses: [],\r\n      wsMessage: '',\r\n      wsMessages: [],\r\n\r\n      socket: null, // Добавляем переменную для хранения WebSocket соединения\r\n      selectedKeyword: \"\",\r\n      selectedUrls: [],  // Массив для хранения URL-адресов\r\n    };\r\n  },\r\n  created() {\r\n    // Инициализация WebSocket и обработчика ошибок\r\n    this.initWebSocket();\r\n\r\n  },\r\n  methods: {\r\n    async sendHttpRequest() {\r\n      try {\r\n        const response = await fetch(this.url);\r\n        const data = await response.text();\r\n        this.httpResponses.push(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    updateUrl() {\r\n      this.$socket.sendObj({ keyword: this.selectedKeyword });\r\n\r\n\r\n  },\r\n\r\n    initWebSocket() {\r\n      // Инициализация WebSocket и обработчика ошибок\r\n\r\n      const WebSocket = require('ws');\r\n\r\nconst keyword = '3'; // Здесь вы указываете нужный ключ\r\nconst url = 'ws://localhost:3000/keywords';\r\nconst socket = new WebSocket(url);\r\n\r\nsocket.on('open', () => {\r\n  console.log('WebSocket соединение установлено');\r\n  socket.send(JSON.stringify({ keyword }));\r\n});\r\n\r\nsocket.on('message', (message) => {\r\n  console.log('Получено сообщение:', message);\r\n});\r\n\r\nsocket.on('close', () => {\r\n  console.log('WebSocket соединение закрыто');\r\n});\r\n\r\n\r\n      // const socket = new WebSocket('ws://localhost:3000/api');\r\n      const socket1 = new WebSocket('ws://localhost:3000/keywords');\r\n      // Обработчик ошибок WebSocket\r\n      socket.addEventListener('error', (event) => {\r\n        console.error('Произошла ошибка:', event);\r\n      });\r\n\r\n      // Обработчик события открытия соединения\r\n      socket.addEventListener('open', (event) => {\r\n        console.log('WebSocket соединение установлено:', event);\r\n      });\r\n\r\n      // Обработчик события приема сообщения\r\n      socket.addEventListener('message', (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\r\n      });\r\n\r\n      // Обработчик события закрытия соединения\r\n      socket.addEventListener('close', (event) => {\r\n        console.log('WebSocket соединение закрыто:', event);\r\n      });\r\n\r\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\r\n\r\n\r\n         // Обработчик ошибок WebSocket\r\n         socket1.addEventListener('error', (event) => {\r\n        console.error('Произошла ошибка:', event);\r\n      });\r\n\r\n      // Обработчик события открытия соединения\r\n      socket1.addEventListener('open', (event) => {\r\n        console.log('WebSocket соединение установлено:', event);\r\n      });\r\n\r\n      // Обработчик события приема сообщения\r\n      socket1.addEventListener('message', (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\r\n      });\r\n\r\n      // Обработчик события закрытия соединения\r\n      socket1.addEventListener('close', (event) => {\r\n        console.log('WebSocket соединение закрыто:', event);\r\n      });\r\n\r\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\r\n\r\n    },\r\n    sendWebSocketMessage() {\r\n      // Отправка сообщения через WebSocket\r\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n        this.socket.send(this.wsMessage);\r\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\r\n        this.wsMessages.push(this.wsMessage)\r\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\r\n      } else {\r\n        console.error('WebSocket соединение не установлено или закрыто.');\r\n      }\r\n    },\r\n\r\n    sendWebSocketMessage1() {\r\n    // Отправка сообщения через WebSocket\r\n    if (this.socket1 && this.socket1.readyState === WebSocket.OPEN) {\r\n      this.socket1.send(this.wsMessage);\r\n      console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\r\n      this.wsMessages.push(this.wsMessage);\r\n      this.wsMessage = ''; // Очищаем поле ввода сообщения\r\n    } else {\r\n      console.error('WebSocket соединение не установлено или закрыто.');\r\n    }\r\n  },\r\n    \r\n\r\n  },\r\n  sockets: {\r\n    // Обработка сообщения, полученного от сервера WebSocket\r\n    message(response) {\r\n    if (response.keyword) {\r\n      this.selectedUrls = response.urls;\r\n    } else {\r\n      this.selectedUrls = [];\r\n    }\r\n  },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n ul  { list-style: none; }\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}