{"ast":null,"code":"export default {\n  data() {\n    return {\n      keyword: \"\",\n      status: {\n        size: 0,\n        currentThreads: 0,\n        progress: 0\n      },\n      contentList: [],\n      selectedContent: null\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.keyword) {\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\n        socket.addEventListener(\"open\", () => {\n          socket.send(this.keyword);\n          this.contentList = [];\n        });\n        socket.addEventListener(\"message\", event => {\n          const data = JSON.parse(event.data);\n          if (Array.isArray(data) && data.length > 0) {\n            this.status = {\n              size: data[0].size,\n              currentThreads: data[0].currentThreads,\n              progress: data[0].progress\n            };\n            this.contentList = data;\n          } else {\n            this.status = {\n              size: 0,\n              currentThreads: 0,\n              progress: 0\n            };\n            this.contentList = [];\n          }\n        });\n        socket.addEventListener(\"error\", () => {\n          console.log(\"Ошибка соединения\");\n        });\n      }\n    },\n    selectContent(content) {\n      this.selectedContent = content;\n    }\n  }\n};","map":{"version":3,"names":["data","keyword","status","size","currentThreads","progress","contentList","selectedContent","methods","sendMessage","socket","WebSocket","addEventListener","send","event","JSON","parse","Array","isArray","length","console","log","selectContent","content"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\SocetClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input v-model=\"keyword\" placeholder=\"Введите ключ (например, 1)\">\r\n    <button :disabled=\"!keyword\" @click=\"sendMessage\">Отправить</button>\r\n    <div>\r\n      <p>Статус загрузки:</p>\r\n      <p>Размер: {{ status.size }}</p>\r\n      <p>Количество запущенных потоков: {{ status.currentThreads }}</p>\r\n      <p>Прогресс загрузки: {{ status.progress }}%</p>\r\n    </div>\r\n    <div>\r\n      <ul>\r\n        <li v-for=\"(item, index) in contentList\" :key=\"index\">\r\n          <a @click=\"selectContent(item)\">{{ item.keyword }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-if=\"selectedContent\">\r\n      <h2>Выбранный контент: {{ selectedContent.keyword }}</h2>\r\n      <ul>\r\n        <li v-for=\"(url, index) in selectedContent.urls\" :key=\"index\">\r\n          <a :href=\"'http://' + url\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      status: {\r\n        size: 0,\r\n        currentThreads: 0,\r\n        progress: 0,\r\n      },\r\n      contentList: [],\r\n      selectedContent: null,\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.keyword) {\r\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n        socket.addEventListener(\"open\", () => {\r\n          socket.send(this.keyword);\r\n          this.contentList = [];\r\n        });\r\n\r\n        socket.addEventListener(\"message\", (event) => {\r\n          const data = JSON.parse(event.data);\r\n\r\n          if (Array.isArray(data) && data.length > 0) {\r\n            this.status = {\r\n              size: data[0].size,\r\n              currentThreads: data[0].currentThreads,\r\n              progress: data[0].progress,\r\n            };\r\n            this.contentList = data;\r\n          } else {\r\n            this.status = {\r\n              size: 0,\r\n              currentThreads: 0,\r\n              progress: 0,\r\n            };\r\n            this.contentList = [];\r\n          }\r\n        });\r\n\r\n        socket.addEventListener(\"error\", () => {\r\n          console.log(\"Ошибка соединения\");\r\n        });\r\n      }\r\n    },\r\n\r\n    selectContent(content) {\r\n      this.selectedContent = content;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA6BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;QACNC,IAAI,EAAE,CAAC;QACPC,cAAc,EAAE,CAAC;QACjBC,QAAQ,EAAE;MACZ,CAAC;MACDC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACR,OAAO,EAAE;QAChB,MAAMS,MAAK,GAAI,IAAIC,SAAS,CAAC,8BAA8B,CAAC;QAC5DD,MAAM,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAM;UACpCF,MAAM,CAACG,IAAI,CAAC,IAAI,CAACZ,OAAO,CAAC;UACzB,IAAI,CAACK,WAAU,GAAI,EAAE;QACvB,CAAC,CAAC;QAEFI,MAAM,CAACE,gBAAgB,CAAC,SAAS,EAAGE,KAAK,IAAK;UAC5C,MAAMd,IAAG,GAAIe,IAAI,CAACC,KAAK,CAACF,KAAK,CAACd,IAAI,CAAC;UAEnC,IAAIiB,KAAK,CAACC,OAAO,CAAClB,IAAI,KAAKA,IAAI,CAACmB,MAAK,GAAI,CAAC,EAAE;YAC1C,IAAI,CAACjB,MAAK,GAAI;cACZC,IAAI,EAAEH,IAAI,CAAC,CAAC,CAAC,CAACG,IAAI;cAClBC,cAAc,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAACI,cAAc;cACtCC,QAAQ,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK;YACpB,CAAC;YACD,IAAI,CAACC,WAAU,GAAIN,IAAI;UACzB,OAAO;YACL,IAAI,CAACE,MAAK,GAAI;cACZC,IAAI,EAAE,CAAC;cACPC,cAAc,EAAE,CAAC;cACjBC,QAAQ,EAAE;YACZ,CAAC;YACD,IAAI,CAACC,WAAU,GAAI,EAAE;UACvB;QACF,CAAC,CAAC;QAEFI,MAAM,CAACE,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACrCQ,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAClC,CAAC,CAAC;MACJ;IACF,CAAC;IAEDC,aAAaA,CAACC,OAAO,EAAE;MACrB,IAAI,CAAChB,eAAc,GAAIgB,OAAO;IAChC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}