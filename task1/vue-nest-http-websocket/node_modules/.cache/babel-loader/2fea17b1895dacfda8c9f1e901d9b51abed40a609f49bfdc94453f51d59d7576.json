{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      url: 'http://localhost:3000/api',\n      // Замените на ваш URL сервера\n      httpResponses: [],\n      wsMessage: '',\n      wsMessages: [],\n      socket: null // Добавляем переменную для хранения WebSocket соединения\n    };\n  },\n\n  created() {\n    // Инициализация WebSocket и обработчика ошибок\n    this.initWebSocket(), this.fetchKeywords();\n  },\n  methods: {\n    async sendHttpRequest() {\n      try {\n        const response = await fetch(this.url);\n        const data = await response.text();\n        this.httpResponses.push(data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async fetchKeywords() {\n      try {\n        const response = await axios.get('http://localhost:3000/keywords'); // Замените URL на свой серверный эндпоинт\n        this.keywords = response.data; // Установите полученные ключевые слова в массив keywords\n      } catch (error) {\n        console.error('Ошибка при получении ключевых слов:', error);\n      }\n    },\n    initWebSocket() {\n      // Инициализация WebSocket и обработчика ошибок\n\n      const socket = new WebSocket('ws://localhost:3000/api');\n\n      // Обработчик ошибок WebSocket\n      socket.addEventListener('error', event => {\n        console.error('Произошла ошибка:', event);\n      });\n\n      // Обработчик события открытия соединения\n      socket.addEventListener('open', event => {\n        console.log('WebSocket соединение установлено:', event);\n      });\n\n      // Обработчик события приема сообщения\n      socket.addEventListener('message', event => {\n        console.log('Получено сообщение:', event.data);\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\n      });\n\n      // Обработчик события закрытия соединения\n      socket.addEventListener('close', event => {\n        console.log('WebSocket соединение закрыто:', event);\n      });\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\n    },\n\n    sendWebSocketMessage() {\n      // Отправка сообщения через WebSocket\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(this.wsMessage);\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\n        this.wsMessages.push(this.wsMessage);\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\n      } else {\n        console.error('WebSocket соединение не установлено или закрыто.');\n      }\n    },\n    filteredKeywords() {\n      const searchTerm = this.searchKeyword.toLowerCase();\n      return this.keywords.filter(keyword => keyword.toLowerCase().includes(searchTerm));\n    }\n  }\n};","map":{"version":3,"names":["axios","data","url","httpResponses","wsMessage","wsMessages","socket","created","initWebSocket","fetchKeywords","methods","sendHttpRequest","response","fetch","text","push","error","console","get","keywords","WebSocket","addEventListener","event","log","sendWebSocketMessage","readyState","OPEN","send","filteredKeywords","searchTerm","searchKeyword","toLowerCase","filter","keyword","includes"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\HttpClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Форма для отправки HTTP-запросов -->\r\n    <form @submit.prevent=\"sendHttpRequest\">\r\n      <input v-model=\"url\" type=\"text\" placeholder=\"URL\">\r\n      <button type=\"submit\">Отправить HTTP-запрос</button>\r\n    </form>\r\n    <!-- Вывод результатов HTTP-запросов -->\r\n\r\n    <!-- Поиск по ключам -->\r\n    <h2>Поиск по ключам</h2>\r\n      <input v-model=\"searchKeyword\" type=\"text\" placeholder=\"Поиск по ключевым словам\">\r\n      <ul>\r\n        <li v-for=\"(keyword, index) in filteredKeywords\" :key=\"index\">{{ keyword }}</li>\r\n      </ul>\r\n    <div>\r\n\r\n\r\n      <h2>Результаты HTTP-запросов:</h2>\r\n      <div v-for=\"(response, index) in httpResponses\" :key=\"index\">\r\n        <p>{{ response }}</p>\r\n      </div>\r\n    </div>\r\n    <!-- WebSocket-клиент -->\r\n    <div>\r\n      <h2>WebSocket-клиент:</h2>\r\n      <input v-model=\"wsMessage\" type=\"text\" placeholder=\"WebSocket сообщение\">\r\n      <button @click=\"sendWebSocketMessage\">Отправить WebSocket сообщение</button>\r\n      <div v-for=\"(message, index) in wsMessages\" :key=\"index\">\r\n        <p>{{ message }}</p>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  data() {\r\n    return {\r\n      url: 'http://localhost:3000/api', // Замените на ваш URL сервера\r\n      httpResponses: [],\r\n      wsMessage: '',\r\n      wsMessages: [],\r\n  \r\n      socket: null, // Добавляем переменную для хранения WebSocket соединения\r\n    };\r\n  },\r\n  created() {\r\n    // Инициализация WebSocket и обработчика ошибок\r\n    this.initWebSocket(),\r\n    this.fetchKeywords();\r\n  },\r\n  methods: {\r\n    async sendHttpRequest() {\r\n      try {\r\n        const response = await fetch(this.url);\r\n        const data = await response.text();\r\n        this.httpResponses.push(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async fetchKeywords() {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/keywords'); // Замените URL на свой серверный эндпоинт\r\n      this.keywords = response.data; // Установите полученные ключевые слова в массив keywords\r\n    } catch (error) {\r\n      console.error('Ошибка при получении ключевых слов:', error);\r\n    }\r\n  },\r\n    initWebSocket() {\r\n      // Инициализация WebSocket и обработчика ошибок\r\n      \r\n      const socket = new WebSocket('ws://localhost:3000/api'); \r\n\r\n      // Обработчик ошибок WebSocket\r\n      socket.addEventListener('error', (event) => {\r\n        console.error('Произошла ошибка:', event);\r\n      });\r\n\r\n      // Обработчик события открытия соединения\r\n      socket.addEventListener('open', (event) => {\r\n        console.log('WebSocket соединение установлено:', event);\r\n      });\r\n\r\n      // Обработчик события приема сообщения\r\n      socket.addEventListener('message', (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\r\n      });\r\n\r\n      // Обработчик события закрытия соединения\r\n      socket.addEventListener('close', (event) => {\r\n        console.log('WebSocket соединение закрыто:', event);\r\n      });\r\n    \r\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\r\n      \r\n    },\r\n    sendWebSocketMessage() {\r\n      // Отправка сообщения через WebSocket\r\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n        this.socket.send(this.wsMessage);\r\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\r\n       this.wsMessages.push(this.wsMessage) \r\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\r\n      } else {\r\n        console.error('WebSocket соединение не установлено или закрыто.');\r\n      }\r\n    },\r\n    filteredKeywords() {\r\n    const searchTerm = this.searchKeyword.toLowerCase();\r\n    return this.keywords.filter(keyword => keyword.toLowerCase().includes(searchTerm));\r\n  },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}