{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Запросы к серверу тест\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.url = $event),\n    placeholder: \"URL\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.url]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendRequest && $options.sendRequest(...args))\n  }, \"Отправить запрос\")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.responses, (response, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"h2\", null, \"Ответ \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"pre\", null, _toDisplayString(response), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","$data","url","$event","placeholder","onClick","_cache","args","$options","sendRequest","_Fragment","_renderList","responses","response","index","key","_toDisplayString"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\Test1.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Запросы к серверу тест</h1>\r\n      <div>\r\n        <input v-model=\"url\" placeholder=\"URL\">\r\n        <button @click=\"sendRequest\">Отправить запрос</button>\r\n      </div>\r\n      <div v-for=\"(response, index) in responses\" :key=\"index\">\r\n        <h2>Ответ {{ index + 1 }}</h2>\r\n        <pre>{{ response }}</pre>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  const WebSocket = require('ws');\r\n  \r\n  export default {\r\n    name: 'TestOne', // Изменили имя компонента\r\n    data() {\r\n      return {\r\n        url: '',\r\n        responses: [],\r\n      };\r\n    },\r\n    methods: {\r\n      sendRequest() {\r\n        const ws = new WebSocket('ws://localhost:3000'); // Замените на соответствующий URL\r\n        ws.onopen = () => {\r\n          ws.send(this.url);\r\n        };\r\n  \r\n        ws.onmessage = (event) => {\r\n          const response = event.data;\r\n          this.responses.push(response);\r\n        };\r\n  \r\n        ws.onclose = () => {\r\n          console.log('WebSocket соединение закрыто');\r\n        };\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Добавьте стили, если необходимо */\r\n  </style>"],"mappings":";gCAEMA,mBAAA,CAA+B,YAA3B,wBAAsB;;;uBAD5BC,mBAAA,CAUM,cATJC,UAA+B,EAC/BF,mBAAA,CAGM,c,gBAFJA,mBAAA,CAAuC;+DAAvBG,KAAA,CAAAC,GAAG,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAjBH,KAAA,CAAAC,GAAG,E,GACnBJ,mBAAA,CAAsD;IAA7CO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,kBAAgB,E,sBAE/CR,mBAAA,CAGMW,SAAA,QAAAC,WAAA,CAH2BV,KAAA,CAAAW,SAAS,GAA7BC,QAAQ,EAAEC,KAAK;yBAA5Bf,mBAAA,CAGM;MAHuCgB,GAAG,EAAED;IAAK,IACrDhB,mBAAA,CAA8B,YAA1B,QAAM,GAAAkB,gBAAA,CAAGF,KAAK,sBAClBhB,mBAAA,CAAyB,aAAAkB,gBAAA,CAAjBH,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}