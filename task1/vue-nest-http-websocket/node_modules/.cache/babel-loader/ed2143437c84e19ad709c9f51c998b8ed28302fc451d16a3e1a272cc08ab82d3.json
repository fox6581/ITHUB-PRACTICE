{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\n// import VueNativeSock from 'vue-native-websocket';\n// Vue.use(VueNativeSock, 'ws://localhost:3000', {\n//   reconnection: true, // автоматическая переподключение при разрыве связи\n//   reconnectionAttempts: 5, // количество попыток переподключения\n//   reconnectionDelay: 3000, // задержка перед каждой попыткой переподключения\n// })\nexport default {\n  data() {\n    return {\n      url: 'http://localhost:3000/api',\n      // Замените на ваш URL сервера\n      httpResponses: [],\n      wsMessage: '',\n      wsMessages: [],\n      socket: null,\n      // Добавляем переменную для хранения WebSocket соединения\n      selectedKeyword: \"\",\n      selectedUrls: [] // Массив для хранения URL-адресов\n    };\n  },\n\n  created() {\n    // Инициализация WebSocket и обработчика ошибок\n    this.initWebSocket();\n  },\n  methods: {\n    async sendHttpRequest() {\n      try {\n        const response = await fetch(this.url);\n        const data = await response.text();\n        this.httpResponses.push(data);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    updateUrl() {\n      axios.get(\"http://localhost:3000/keywords\").then(response => {\n        const keywordData = response.data.find(entry => entry.keyword === this.selectedKeyword);\n        this.selectedUrls = keywordData ? keywordData.urls : []; // Обновляем массив URL-адресов\n      }).catch(error => {\n        console.error(\"Ошибка при получении данных: \" + error);\n      });\n    },\n    initWebSocket() {\n      // Инициализация WebSocket и обработчика ошибок\n\n      const socket = new WebSocket('ws://localhost:3000/api');\n\n      // Обработчик ошибок WebSocket\n      socket.addEventListener('error', event => {\n        console.error('Произошла ошибка:', event);\n      });\n\n      // Обработчик события открытия соединения\n      socket.addEventListener('open', event => {\n        console.log('WebSocket соединение установлено:', event);\n      });\n\n      // Обработчик события приема сообщения\n      socket.addEventListener('message', event => {\n        console.log('Получено сообщение:', event.data);\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\n      });\n\n      // Обработчик события закрытия соединения\n      socket.addEventListener('close', event => {\n        console.log('WebSocket соединение закрыто:', event);\n      });\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\n    },\n\n    sendWebSocketMessage() {\n      // Отправка сообщения через WebSocket\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(this.wsMessage);\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\n        this.wsMessages.push(this.wsMessage);\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\n      } else {\n        console.error('WebSocket соединение не установлено или закрыто.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","url","httpResponses","wsMessage","wsMessages","socket","selectedKeyword","selectedUrls","created","initWebSocket","methods","sendHttpRequest","response","fetch","text","push","error","console","updateUrl","get","then","keywordData","find","entry","keyword","urls","catch","WebSocket","addEventListener","event","log","sendWebSocketMessage","readyState","OPEN","send"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\HttpClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Форма для отправки HTTP-запросов -->\r\n    <form @submit.prevent=\"sendHttpRequest\">\r\n      <input v-model=\"url\" type=\"text\" placeholder=\"URL\">\r\n      <button type=\"submit\">Отправить HTTP-запрос</button>\r\n    </form>\r\n    <!-- Вывод результатов HTTP-запросов -->\r\n\r\n    <div>\r\n      <!-- Поиск по ключам -->\r\n      <h2>Поиск по ключам</h2>\r\n\r\n      <input v-model=\"selectedKeyword\" @input=\"updateUrl\" placeholder=\"Введите ключевое слово\" />\r\n      <p v-if=\"selectedUrls.length > 0\">\r\n    Соответствующие URL-адреса:\r\n    <ul>\r\n      <li v-for=\"(url, index) in selectedUrls\" :key=\"index\">\r\n        <a :href=\"'http://' + url\">{{ url }}</a>\r\n      </li>\r\n    </ul>\r\n  </p>\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <h2>Результаты HTTP-запросов:</h2>\r\n    <div v-for=\"(response, index) in httpResponses\" :key=\"index\">\r\n      <p>{{ response }}</p>\r\n    </div>\r\n  </div>\r\n  <!-- WebSocket-клиент -->\r\n  <div>\r\n    <h2>WebSocket-клиент:</h2>\r\n    <input v-model=\"wsMessage\" type=\"text\" placeholder=\"WebSocket сообщение\">\r\n    <button @click=\"sendWebSocketMessage\">Отправить WebSocket сообщение</button>\r\n    <div v-for=\"(message, index) in wsMessages\" :key=\"index\">\r\n      <p>{{ message }}</p>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n// import VueNativeSock from 'vue-native-websocket';\r\n// Vue.use(VueNativeSock, 'ws://localhost:3000', {\r\n//   reconnection: true, // автоматическая переподключение при разрыве связи\r\n//   reconnectionAttempts: 5, // количество попыток переподключения\r\n//   reconnectionDelay: 3000, // задержка перед каждой попыткой переподключения\r\n// })\r\nexport default {\r\n  data() {\r\n    return {\r\n      url: 'http://localhost:3000/api', // Замените на ваш URL сервера\r\n      httpResponses: [],\r\n      wsMessage: '',\r\n      wsMessages: [],\r\n\r\n      socket: null, // Добавляем переменную для хранения WebSocket соединения\r\n      selectedKeyword: \"\",\r\n      selectedUrls: [],  // Массив для хранения URL-адресов\r\n    };\r\n  },\r\n  created() {\r\n    // Инициализация WebSocket и обработчика ошибок\r\n    this.initWebSocket();\r\n\r\n  },\r\n  methods: {\r\n    async sendHttpRequest() {\r\n      try {\r\n        const response = await fetch(this.url);\r\n        const data = await response.text();\r\n        this.httpResponses.push(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    updateUrl() {\r\n    axios.get(\"http://localhost:3000/keywords\")\r\n      .then((response) => {\r\n        const keywordData = response.data.find((entry) => entry.keyword === this.selectedKeyword);\r\n        this.selectedUrls = keywordData ? keywordData.urls : []; // Обновляем массив URL-адресов\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка при получении данных: \" + error);\r\n      });\r\n  },\r\n\r\n    initWebSocket() {\r\n      // Инициализация WebSocket и обработчика ошибок\r\n\r\n      const socket = new WebSocket('ws://localhost:3000/api');\r\n\r\n      // Обработчик ошибок WebSocket\r\n      socket.addEventListener('error', (event) => {\r\n        console.error('Произошла ошибка:', event);\r\n      });\r\n\r\n      // Обработчик события открытия соединения\r\n      socket.addEventListener('open', (event) => {\r\n        console.log('WebSocket соединение установлено:', event);\r\n      });\r\n\r\n      // Обработчик события приема сообщения\r\n      socket.addEventListener('message', (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.wsMessages.push(event.data); // Сохраняем полученное сообщение\r\n      });\r\n\r\n      // Обработчик события закрытия соединения\r\n      socket.addEventListener('close', (event) => {\r\n        console.log('WebSocket соединение закрыто:', event);\r\n      });\r\n\r\n      this.socket = socket; // Сохраняем соединение в состоянии компонента\r\n\r\n    },\r\n    sendWebSocketMessage() {\r\n      // Отправка сообщения через WebSocket\r\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n        this.socket.send(this.wsMessage);\r\n        console.log('Отправлено сообщение через WebSocket:', this.wsMessage);\r\n        this.wsMessages.push(this.wsMessage)\r\n        this.wsMessage = ''; // Очищаем поле ввода сообщения\r\n      } else {\r\n        console.error('WebSocket соединение не установлено или закрыто.');\r\n      }\r\n    },\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<css>\r\n ul { list-style: none; }\r\n</css>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}