{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.connectWebSocket && $options.connectWebSocket(...args))\n  }, \"Подключить WebSocket\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.disconnectWebSocket && $options.disconnectWebSocket(...args))\n  }, \"Отключить WebSocket\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id\n    }, _toDisplayString(message.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","args","$options","connectWebSocket","disconnectWebSocket","_Fragment","_renderList","$data","messages","message","key","id","text"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\MysScket.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"connectWebSocket\">Подключить WebSocket</button>\r\n    <button @click=\"disconnectWebSocket\">Отключить WebSocket</button>\r\n    <div v-for=\"message in messages\" :key=\"message.id\">\r\n      {{ message.text }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      messages: [],\r\n    };\r\n  },\r\n  methods: {\r\n    connectWebSocket() {\r\n      const keyword = '3'; // Здесь вы указываете нужный ключ\r\n      const url = 'ws://localhost:3000/keywords';\r\n      this.socket = new WebSocket(url);\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket соединение установлено');\r\n        this.socket.send(JSON.stringify({ keyword }));\r\n      };\r\n\r\n      this.socket.onmessage = (event) => {\r\n        console.log('Получено сообщение:', event.data);\r\n        this.messages.push({ text: event.data, id: Date.now() });\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        console.log('WebSocket соединение закрыто');\r\n      };\r\n    },\r\n    disconnectWebSocket() {\r\n      if (this.socket) {\r\n        this.socket.close();\r\n        this.socket = null;\r\n      }\r\n    },\r\n  },\r\n  beforeUnmount() {\r\n    this.disconnectWebSocket();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;uBACEA,mBAAA,CAMM,cALJC,mBAAA,CAA+D;IAAtDC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;KAAE,sBAAoB,GACtDH,mBAAA,CAAiE;IAAxDC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,mBAAA,IAAAF,QAAA,CAAAE,mBAAA,IAAAH,IAAA,CAAmB;KAAE,qBAAmB,I,kBACxDJ,mBAAA,CAEMQ,SAAA,QAAAC,WAAA,CAFiBC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBZ,mBAAA,CAEM;MAF4Ba,GAAG,EAAED,OAAO,CAACE;wBAC1CF,OAAO,CAACG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}