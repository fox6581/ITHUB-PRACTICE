{"ast":null,"code":"export default {\n  data() {\n    return {\n      keyword: \"\",\n      response: [],\n      notFound: false\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.keyword) {\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\n        socket.addEventListener(\"open\", () => {\n          socket.send(this.keyword);\n        });\n        socket.addEventListener(\"message\", event => {\n          const data = JSON.parse(event.data);\n          if (data.length == 0) {\n            this.notFound = true;\n          } else {\n            this.response = data;\n          }\n          socket.close(); // Закрыть соединение после получения данных\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","keyword","response","notFound","methods","sendMessage","socket","WebSocket","addEventListener","send","event","JSON","parse","length","close"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\MysScket.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input v-model=\"keyword\" placeholder=\"Введите ключ (например, 1)\">\r\n    <button @click=\"sendMessage\">Отправить</button>\r\n    <div>\r\n      <p>Ответ от сервера:</p>\r\n      <ul>\r\n        <li v-for=\"(url, index) in response\" :key=\"index\"><a href=\"http://{{ url }}\">{{ url }}</a></li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      response: [],\r\n      notFound: false\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.keyword) {\r\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n        socket.addEventListener(\"open\", () => {\r\n          socket.send(this.keyword);\r\n        });\r\n\r\n        socket.addEventListener(\"message\", (event) => {\r\n          const data = JSON.parse(event.data);\r\n          if (data.length == 0){\r\n            this.notFound = true\r\n          }\r\n          else {\r\n            this.response = data;\r\n          }\r\n         \r\n          socket.close(); // Закрыть соединение после получения данных\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AAcA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChB,MAAMK,MAAK,GAAI,IAAIC,SAAS,CAAC,8BAA8B,CAAC;QAC5DD,MAAM,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAM;UACpCF,MAAM,CAACG,IAAI,CAAC,IAAI,CAACR,OAAO,CAAC;QAC3B,CAAC,CAAC;QAEFK,MAAM,CAACE,gBAAgB,CAAC,SAAS,EAAGE,KAAK,IAAK;UAC5C,MAAMV,IAAG,GAAIW,IAAI,CAACC,KAAK,CAACF,KAAK,CAACV,IAAI,CAAC;UACnC,IAAIA,IAAI,CAACa,MAAK,IAAK,CAAC,EAAC;YACnB,IAAI,CAACV,QAAO,GAAI,IAAG;UACrB,OACK;YACH,IAAI,CAACD,QAAO,GAAIF,IAAI;UACtB;UAEAM,MAAM,CAACQ,KAAK,CAAC,CAAC,EAAE;QAClB,CAAC,CAAC;MACJ;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}