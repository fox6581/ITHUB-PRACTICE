{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Ответ от сервера:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.keyword = $event),\n    placeholder: \"Введите ключ (например, 1)\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.keyword]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Отправить\"), _createElementVNode(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.response, (url, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(url), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","$data","keyword","$event","placeholder","onClick","_cache","args","$options","sendMessage","_hoisted_1","_Fragment","_renderList","response","url","index","key","_toDisplayString"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\MysScket.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input v-model=\"keyword\" placeholder=\"Введите ключ (например, 1)\">\r\n    <button @click=\"sendMessage\">Отправить</button>\r\n    <div>\r\n      <p>Ответ от сервера:</p>\r\n      <ul>\r\n        <li v-for=\"(url, index) in response\" :key=\"index\">{{ url }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      response: []\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.keyword) {\r\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n        socket.addEventListener(\"open\", () => {\r\n          socket.send(this.keyword);\r\n        });\r\n\r\n        socket.addEventListener(\"message\", (event) => {\r\n          const data = JSON.parse(event.data);\r\n          this.response = data;\r\n          socket.close(); // Закрыть соединение после получения данных\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";gCAKMA,mBAAA,CAAwB,WAArB,mBAAiB;;;uBAJxBC,mBAAA,CASM,c,gBARJD,mBAAA,CAAkE;+DAAlDE,KAAA,CAAAC,OAAO,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAArBH,KAAA,CAAAC,OAAO,E,GACvBH,mBAAA,CAA+C;IAAtCM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,WAAS,GACtCR,mBAAA,CAKM,cAJJW,UAAwB,EACxBX,mBAAA,CAEK,c,kBADHC,mBAAA,CAAgEW,SAAA,QAAAC,WAAA,CAArCX,KAAA,CAAAY,QAAQ,GAAvBC,GAAG,EAAEC,KAAK;yBAAtBf,mBAAA,CAAgE;MAA1BgB,GAAG,EAAED;IAAK,GAAAE,gBAAA,CAAKH,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}