{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      keyword: \"\",\n      status: {\n        size: 0,\n        currentThreads: 0,\n        progress: 0,\n        selectedContent: [],\n        progress: 0\n      },\n      contentList: [],\n      downloadLimit: null,\n      byteLimitPerSecond: null\n    };\n  },\n  created() {\n    // Запрос для получения downloadLimit\n    fetch('http://localhost:3000/config/download-limit').then(response => response.json()).then(data => {\n      this.downloadLimit = data.downloadLimit;\n      // Теперь вы можете использовать this.downloadLimit в вашем компоненте\n    });\n\n    // Запрос для получения byteLimitPerSecond\n    fetch('http://localhost:3000/config/byte-limit-per-second').then(response => response.json()).then(data => {\n      this.byteLimitPerSecond = data.byteLimitPerSecond;\n      // Теперь вы можете использовать this.byteLimitPerSecond в вашем компоненте\n    });\n  },\n\n  methods: {\n    async downloadFile(index) {\n      try {\n        const url = this.contentList[index]; // Получаем URL из contentList по индексу\n        console.log(url);\n        const response = await fetch(`http://localhost:3000/download/${encodeURIComponent(url)}`, {\n          method: 'GET'\n        });\n        if (response.status === 200) {\n          const blob = await response.blob();\n          const fileURL = window.URL.createObjectURL(blob);\n          const status = {\n            size: blob.size,\n            currentThreads: this.downloadLimit,\n            progress: 100 // Считаем, что загрузка завершена\n          };\n\n          // Обновляем свойства элемента в contentList\n          this.contentList[index] = {\n            ...this.contentList[index],\n            status,\n            isDownloading: true,\n            downloadLink: fileURL\n          };\n        } else {\n          console.error('Ошибка скачивания файла');\n        }\n      } catch (error) {\n        console.error(`Произошла ошибка: ${error}`);\n      }\n    },\n    sendMessage() {\n      if (this.keyword) {\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\n        socket.addEventListener(\"open\", () => {\n          socket.send(this.keyword);\n          this.contentList = [];\n        });\n        socket.addEventListener(\"message\", event => {\n          const data = JSON.parse(event.data);\n          console.log(\"Получены данные от сервера:\", data);\n          if (Array.isArray(data) && data.length > 0) {\n            this.status = {\n              size: data[0].size,\n              currentThreads: data[0].currentThreads,\n              progress: data[0].progress\n            };\n            this.contentList = data;\n          } else {\n            this.status = {\n              size: 0,\n              currentThreads: 0,\n              progress: 0\n            };\n            this.contentList = [];\n          }\n        });\n        socket.addEventListener(\"error\", () => {\n          console.log(\"Ошибка соединения\");\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","keyword","status","size","currentThreads","progress","selectedContent","contentList","downloadLimit","byteLimitPerSecond","created","fetch","then","response","json","methods","downloadFile","index","url","console","log","encodeURIComponent","method","blob","fileURL","window","URL","createObjectURL","isDownloading","downloadLink","error","sendMessage","socket","WebSocket","addEventListener","send","event","JSON","parse","Array","isArray","length"],"sources":["C:\\std\\vue-nest-http-websocket\\src\\components\\SocetClient.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input v-model=\"keyword\" placeholder=\"Введите ключ (например, 1)\">\r\n    <button :disabled=\"!keyword\" @click=\"sendMessage\">Отправить</button>\r\n    <div>\r\n      <ul>\r\n        <p v-if=\"contentList.length === 0\">нет контента</p>\r\n        <li v-for=\"(item, index) in contentList\" :key=\"index\">\r\n          <div>\r\n            <a  target=\"_blank\" :href=\"item\">{{ item }}</a>\r\n            <button @click=\"downloadFile(index)\">Скачать</button>\r\n            <div v-if=\"item.isDownloading\">\r\n              Размер: {{ item.status.size }} bytes<br>\r\n              Кол-во запущенных потоков: {{ item.status.currentThreads }}<br>\r\n              Количечество памяти на поток: {{ this.byteLimitPerSecond }} <br>\r\n              Прогресс загрузки: {{ item.status.progress }}%\r\n              <a :href=\"item.downloadLink\" download>Скачать файл</a>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-if=\"selectedContent\">\r\n      <h2>Выбранный контент:</h2>\r\n      <ul>\r\n        <li v-for=\"(url, index) in selectedContent\" :key=\"index\">\r\n          <a target=\"_blank\" :href=\"url\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      keyword: \"\",\r\n      status: {\r\n        size: 0,\r\n        currentThreads: 0,\r\n        progress: 0,\r\n        selectedContent: [],\r\n        progress: 0,\r\n      },\r\n      contentList: [],\r\n\r\n      downloadLimit: null,\r\n      byteLimitPerSecond: null,\r\n    };\r\n  },\r\n  created() {\r\n    // Запрос для получения downloadLimit\r\n    fetch('http://localhost:3000/config/download-limit')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.downloadLimit = data.downloadLimit;\r\n        // Теперь вы можете использовать this.downloadLimit в вашем компоненте\r\n      });\r\n\r\n    // Запрос для получения byteLimitPerSecond\r\n    fetch('http://localhost:3000/config/byte-limit-per-second')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.byteLimitPerSecond = data.byteLimitPerSecond;\r\n        // Теперь вы можете использовать this.byteLimitPerSecond в вашем компоненте\r\n      });\r\n  },\r\n  methods: {\r\n    async downloadFile(index) {\r\n      try {\r\n        const url = this.contentList[index]; // Получаем URL из contentList по индексу\r\n        console.log(url)\r\n        const response = await fetch(`http://localhost:3000/download/${encodeURIComponent(url)}`, {\r\n          method: 'GET',\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const blob = await response.blob();\r\n          const fileURL = window.URL.createObjectURL(blob);\r\n\r\n          const status = {\r\n            size: blob.size,\r\n            currentThreads: this.downloadLimit,\r\n            progress: 100, // Считаем, что загрузка завершена\r\n          };\r\n\r\n          // Обновляем свойства элемента в contentList\r\n          this.contentList[index] = {\r\n            ...this.contentList[index],\r\n            status,\r\n            isDownloading: true,\r\n            downloadLink: fileURL,\r\n          };\r\n\r\n        } else {\r\n          console.error('Ошибка скачивания файла');\r\n        }\r\n      } catch (error) {\r\n        console.error(`Произошла ошибка: ${error}`);\r\n      }\r\n    },\r\n\r\n    sendMessage() {\r\n      if (this.keyword) {\r\n        const socket = new WebSocket(\"ws://localhost:3000/keywords\");\r\n        socket.addEventListener(\"open\", () => {\r\n          socket.send(this.keyword);\r\n          this.contentList = [];\r\n        });\r\n\r\n        socket.addEventListener(\"message\", (event) => {\r\n          const data = JSON.parse(event.data);\r\n          console.log(\"Получены данные от сервера:\", data);\r\n\r\n          if (Array.isArray(data) && data.length > 0) {\r\n            this.status = {\r\n              size: data[0].size,\r\n              currentThreads: data[0].currentThreads,\r\n              progress: data[0].progress,\r\n            };\r\n            this.contentList = data;\r\n          } else {\r\n            this.status = {\r\n              size: 0,\r\n              currentThreads: 0,\r\n              progress: 0,\r\n            };\r\n            this.contentList = [];\r\n          }\r\n        });\r\n\r\n        socket.addEventListener(\"error\", () => {\r\n          console.log(\"Ошибка соединения\");\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}